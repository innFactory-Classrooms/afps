jdbc-journal {
  slick = ${slick}
}

jdbc-snapshot-store {
  slick = ${slick}
}

jdbc-read-journal {
  slick = ${slick}
}

slick {
  profile = "slick.jdbc.H2Profile$"
  db {
    url = "jdbc:h2:mem:test-database;DB_CLOSE_DELAY=-1"
    user = "sa"
    password = ""
    driver = "org.h2.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}
logger.scala.slick=INFO
pekko {
    loglevel = "INFO"
      loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
      logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"

  actor {
    serializers {
      jackson-json = "org.apache.pekko.serialization.jackson.JacksonJsonSerializer"
    }
    serialization-bindings {
      "vl5.Sensor$Event" = jackson-json
      "vl5.Sensor$State" = jackson-json
    }
  }
  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }
}

pekko.persistence.jdbc {
  shared-databases {
    slick {
      profile = "slick.jdbc.H2Profile$"
      db {
        url = "jdbc:h2:mem:test-database;DB_CLOSE_DELAY=-1"
        user = "sa"
        password = ""
        driver = "org.h2.Driver"
        numThreads = 5
        maxConnections = 5
        minConnections = 1
      }
    }
  }

  query {
    journal.class = "org.apache.pekko.persistence.jdbc.query.scaladsl.JdbcReadJournalProvider"
  }

  journal {
    use-shared-db = "slick"
    class = "org.apache.pekko.persistence.jdbc.journal.JdbcAsyncWriteJournal"
  }

  snapshot-store {
    use-shared-db = "slick"
    class = "org.apache.pekko.persistence.jdbc.snapshot.JdbcSnapshotStore"
  }
}

jdbc-journal.tables.journal.tableName = "event_journal"
jdbc-snapshot-store.tables.snapshot.tableName = "snapshot"
jdbc-read-journal.tables.journal.tableName = "event_journal"

pekko.persistence.jdbc.schema.tables.journal.auto-initialize = true
pekko.persistence.jdbc.schema.tables.snapshot.auto-initialize = true